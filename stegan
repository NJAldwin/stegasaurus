#!/usr/bin/env python
# coding=utf-8

# Group:    Stegasaurus
# Version:  0.01
# Date:     2012-2-17

# ==== Group Members ====
#  - Nick Aldwin <aldwin@ccs.neu.edu>
#  - Gary Katsevman <gkatsev@css.neu.edu>
#  - Alex Metzger <asm@ccs.neu.edu>
#  - Melissa Xie <emzee@ccs.neu.edu>

# ==== Usage ====
# see README

import getopt, sys, os
from audioformat import checkformat, convertmp3
from engine import encode, decode

# Constants
DECODE = "decode"               # Operation mode of the software
ENCODE = "encode"
WAV = "wav"                     # input type
RATE = 44100                    # Sample rate (expected)

def usage():
    """ Prints program usage and exits """
    print """./stegan --encode file1 file2 file3
./stegan --decode file4 file5
file1 → is input audio file, the carrier
file2 → is input message file
file3 → is output audio file
file4 → is input audio with steganography; i.e., file3
file5 → is output message file"""
    exit()

def paramcheck(mode,opts):
    # checks if a mode has been indicated 
    if not mode:
        print >>sys.stderr, "ERROR: No mode specified!"
        usage()

    mode = mode[0][0].strip('-')            # clean up the mode 
    nargs = 3 if mode == ENCODE else 2      # appropriate # of args that should follow

    # check for appropriate number of arguments
    if len(opts) < nargs:
        usage()

    # check that the file to encode/decode is an existing file on the system
    if not os.path.isfile(opts[0]):
        print >>sys.stderr, 'ERROR: Input audio file %s does not exist!' % opts[0]
        exit()

    # convert input file to wav if it's an mp3, change filename in opts array 
    if opts[0][-3:] == "mp3":
        opts[0] = convertmp3(opts[0])

    # double check that the file is a correctly formatted audio file
    if not checkformat(opts[0], WAV, RATE):
        print >>sys.stderr, "ERROR: File is of unexpected type!"
        exit()

    return mode, opts

def main():
    """ Main operations """
    # Attempt to get the options the user provided
    try:
        mode, opts = getopt.getopt(sys.argv[1:],"",[DECODE,ENCODE])
    except:
        # if the command is improperly formed, print the usage
        usage()

    mode, opts = paramcheck(mode,opts)    

    if mode == ENCODE:
        encode(opts) # calls encode on the arguments provided
    else:
        decode(opts) # calls decode on the arguments provided

if __name__ == '__main__':
    main()
